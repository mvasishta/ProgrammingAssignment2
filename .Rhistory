search()
find.package("stats")
install.packages("KernSmooth")
search()
library("KernSmooth")
search()
getwd()
search()
library(swirl)
search()
unlink(swirl)
weekdays()
Sys.time()
quit()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <= sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
past("Programming","is","fun!")
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
submit()
telegram("Swirl","is","awesome")
submit()
mad_libs(c(noun="light",place="Cupertino",adjective="agitated"))
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
x <- rnorm(2*2*10)
x
?rnorm
x <- rnorm(10)
x
f1 <- g1(2,5)
?message
message("ss")
warning("a")
error("err")
stop("err")
printmessage <- function(x) {}
if(x>0)
print("x is greater than 0")
printmessage <- function(x) {}
printmessage <- function(x) { }
printmessage <- function(x) { if(x>0)  }
debug(lm)
lm(y-x)
library(swirl)
swirl()
head(flags)
setwd("/Users/training_user/Documents/R-workspace")
source("inverse_training.R")
x <- NULL
y <- makeCacheMatrix(x)
y$set(x)
x <- matrix(1:4,2,2)
y <- makeCacheMatrix(x)
y$set(x)
cacheSolve(y)
z <- matrix()
cacheSolve(z)
typeof(z)
typeof(y)
class(y)
source("inverse_training.R")
y <- makeCacheMatrix(x)
?list
source("inverse_training.R")
source("inverse_training.R")
y <- makeCacheMatrix(x)
y$set()
y <- makeCacheMatrix$set(x)
y <- makeCacheMatrix(x)
y$set(x)
y$getInverse()
y$get()
solve(y$getInverse())
source("inverse_training.R")
y <- makeCacheMatrix(x)
y$set(x)
y$getInverse()
source("inverse_training.R")
y <- makeCacheMatrix(x)
y$set(x)
y$getInverse()
y$get()
identical(y$get(),solve(y$getInverse()))
x <- matrix(1:4,2,2)
y <- matrix(1:4,2,2)
identical(x,y)
identical(x,solve(solve(y)))
solve(y)
solve(solve(y))
x
y
y <- makeCacheMatrix(x)
y[2]
names(y)
names(y[2])
names(y[2]) = "get"
names(y[2]) == "get"
names(y[2]) == "getInverse"
names(y[3]) == "getInverse"
source("inverse_training.R")
source("inverse_training.R")
source("inverse_training.R")
x <- matrix(1:4,2,2)
z <- matrix()
y <- makeCacheMatrix()
y$set(x)
cacheSolve(z)
length(z)
source("inverse_training.R")
z <- matrix()
x <- matrix(1:4,2,2)
y <- makeCacheMatrix()
y$set(x)
cacheSolve(z)
cacheSolve(y)
p <- makeCacheMatrix()
cacheSolve(p)
source("inverse_training.R")
x <- matrix(1:4,2,2)
y <- makeCacheMatrix()
y$set(x)
cacheSolve(y)
p <- makeCacheMatrix()
cacheSolve(p)
source("inverse_training.R")
x <- matrix(1:4,2,2)
y <- makeCacheMatrix()
y$set(x)
cacheSolve(y)
p <- makeCacheMatrix()
cacheSolve(p)
source("inverse_training.R")
cacheSolve(p)
source("inverse_training.R")
x <- matrix(1:4,2,2)
y <- makeCacheMatrix()
y$set(x)
cacheSolve(y)
p <- makeCacheMatrix()
cacheSolve(p)
source("inverse_training.R")
cacheSolve(p)
m <- matrix()
cacheSolve(m)
is.null(p$get())
source("inverse_training.R")
cacheSolve(m)
cacheSolve(p)
is.null(p$get())
source("inverse_training.R")
source("inverse_training.R")
cacheSolve(p)
cacheSolve(,)
cacheSolve(m)
cacheSolve(y)
cacheSolve(p)
getwd()
setwd("/Users/training_user/git-repo/ProgrammingAssignment2")
source("cachematrix.R")
x <- matrix(1:4,2,2)
y <- makeCacheMatrix()
y$set(x)
cacheSolve(y)
m <- matrix()
cacheSolve(m)
p <- makeCacheMatrix()
cacheSolve(p)
